描述符就是把某种特殊类型的类的实例指派给另一个类的属性
__get__ (self,instance,owner)用于访问
__set__用于调用
__del__用于删除

class MYDecriptor:
  def __get__(self,instance,owner):
    print("getting..",self,instance,owner)
  
  def __set__(self,instance,value):
    print("setting...",self,instance,value)
  
  def __delete__(self,instance):
    print("deleting..", self, instance)
   
class Test():
  x = MyDeciptor()

test = Test()
test.x 
test.x = "X-man"
del test.x


Property 的原理：
自己定义

class MyProperty:
  def __init__(self, fget = None, fset = None, fdel = None):
    self.fget = fget 
    self.fset = fset
    self.fdel = fdel
  
  def __get__(self,instance,owner):
    return self.fget(instance)
  
  def __set__(self,instance,value):
    self.fset(instance,value)
  
  def __delete__(self,instance):
    self.fdel(instance)

class C:
  def __init__(self):
    self._x = None
  
  def getX(self):
    return self._x
  
  def setX(self, value):
    self_x = value
  
  def delX(self):
    del self._x
  
  x = MyProperty(getX, setX, delX)
  
c = C()
c.x = 'x-man'
c._x #就可以成功被x 来干预
del.x

定义温度：
class Clesius:
  def __init__(self, value = 26.0)
    self.value = float(value)
    
  def __get__(self,instance, owner:)
    return self.value
  
  def __set__(Self,instance,value):
    self.value = float(value)
  
class Fahrenheit:
  def __get__(self,instance, owner):
    return instance.cel * 1.8 + 32
  
  def __set__(self,instance,value):
    instance.cel = (float(value) -32)/1.8
  
  
class Temperature:
  cel = Celsois()
  fah = Fahrenheit()
  
使用：
temp = temperature() 先定义转换
temp.cel #产生初始化的值
temp.cel = 30
temp.fah #就会成为30
temp.fah = 100 
temp.cel # cel 就会自动转换根据100 fah




